#!/bin/bash
set -e

CONTAINER_IFNAME=eth1
while (( $# )); do
    case "$1" in
        --verbose|-v)
            VERB=1
            ;;
        --wait|-w)
            WAIT=1
            ;;
        --route|-r)
            # Collect each route in another ${ROUTE[x]} entry
            shift
            ROUTE[${#ROUTE[*]}]=$1
            ;;
        --interface|-i)
            shift
            CONTAINER_IFNAME=$1
            (( VERB )) && echo "Guest i'face: $CONTAINER_IFNAME"
            ;;
        --*|-*) # unrecognized, eg. --help, -?
            HELP=1
            echo "Invalid option: $1"
            ;;
        *)
            if   [ -z "$IFNAME" ]; then
                IFNAME=$1
                (( VERB )) && echo "Host  i'face: $IFNAME"
            elif [ -z "$GUESTNAME" ]; then
                GUESTNAME=$1
                (( VERB )) && echo "Guest name:   $GUESTNAME"
            elif [ -z "$IPADDR" ]; then
                IPADDR=$1
                (( VERB )) && echo "IP  address:  $IPADDR"
            elif [ -z "$MACADDR" ]; then
                MACADDR=$1
                (( VERB )) && echo "MAC address:  $MACADDR"
            else
                HELP=1
                echo "Invalid argument: $1"
            fi
            ;;
    esac
    shift
done

[ "$IPADDR" ] || HELP=1

[ "$WAIT" ] && {
  while ! grep -q ^1$ /sys/class/net/$CONTAINER_IFNAME/carrier 2>/dev/null
  do sleep 1
  done
  exit 0
}

[ "$HELP" ] && {
    echo "Syntax:"
    echo "pipework <hostinterface> <guest> <ipaddr>/<subnet>[@default_gateway] [macaddr]"
    echo "pipework <hostinterface> <guest> dhcp [macaddr]"
    echo "pipework -w|--wait         (await interface appearance, within container)"
    echo "  The following options are available in any of the above commands:"
    echo "    -i|--interface <containerinterface> ..."
    echo "    -v|--verbose ...       (log activity)"
    echo "    -h|--help              (print this help and exit)"
    echo "  Any number of additional routes using the new interface may be specified:"
    echo "    -r|--route <network>   (route <network> via dev ${CONTAINER_IFNAME})"
    echo "  eg.  --route 224.0.0.0/4 (route multicast via ${CONTAINER_IFNAME})"
    exit 1
}

# First step: determine type of first argument (bridge, physical interface...)
if [ -d /sys/class/net/$IFNAME ]
then
    if [ -d /sys/class/net/$IFNAME/bridge ]
    then 
        IFTYPE=bridge
        BRTYPE=linux
    elif $(which ovs-vsctl >/dev/null) && $(ovs-vsctl list-br|grep -q ^$IFNAME$)
    then 
        IFTYPE=bridge
        BRTYPE=openvswitch
    else
        IFTYPE=phys
    fi
else
    case "$IFNAME" in
	br*)
	    IFTYPE=bridge
	    BRTYPE=linux
	    ;;
	*)
	    echo "I do not know how to setup interface $IFNAME."
	    exit 1
	    ;;
    esac
fi

# Second step: find the guest (for now, we only support LXC containers)
while read dev mnt fstype options dump fsck
do
    [ "$fstype" != "cgroup" ] && continue
    echo $options | grep -qw devices || continue
    CGROUPMNT=$mnt
done < /proc/mounts

[ "$CGROUPMNT" ] || {
    echo "Could not locate cgroup mount point."
    exit 1
}

# Try to find a cgroup matching exactly the provided name.
N=$(find "$CGROUPMNT" -name "$GUESTNAME" | wc -l)
case "$N" in
    0)
	# If we didn't find anything, try to lookup the container with Docker.
	if which docker >/dev/null
	then
	    DOCKERID=$(docker inspect --format='{{.ID}}' $GUESTNAME)
	    [ "$DOCKERID" = "<no value>" ] && {
		echo "Container $GUESTNAME not found, and unknown to Docker."
		exit 1
	    }
	    NN=$(find "$CGROUPMNT" -name "$DOCKERID" | wc -l)
	    case "$NN" in
		0)
		    echo "Container $GUESTNAME doesn't seem to be running."
		    exit 1
		    ;;
		1)
		    GUESTNAME=$DOCKERID
		    ;;
		*)
		    echo "Multiple cgroup entries for container $GUESTNAME."
		    exit 1
		    ;;
	    esac
	else
	    echo "Container $GUESTNAME not found, and Docker not installed."
	    exit 1
	fi
	;;
    1)
	true
	;;
    *)
	echo "Found more than one container matching $GUESTNAME."
	exit 1
	;;
esac

if [ "$IPADDR" = "dhcp" ]; then
    # We use udhcpc to obtain the DHCP lease, make sure it's installed.
    which udhcpc >/dev/null || {
	echo "You asked for DHCP; please install udhcpc first."
	exit 1
    }
else
    # Check if a subnet mask was provided.
    echo $IPADDR | grep -q / || {
	echo "The IP address should include a netmask."
	echo "Maybe you meant $IPADDR/24 ?"
	exit 1
    }
    # Check if a gateway address was provided.
    if echo $IPADDR | grep -q @
    then
        GATEWAY=$(echo $IPADDR | cut -d@ -f2)
        IPADDR=$(echo $IPADDR | cut -d@ -f1)
    else
        GATEWAY=
    fi
fi

NSPID=$(head -n 1 $(find "$CGROUPMNT" -name "$GUESTNAME" | head -n 1)/tasks)
if [ -z "$NSPID" ]; then
    echo "Could not find a process inside container $GUESTNAME."
    exit 1
fi

mkdir -p /var/run/netns
rm -f /var/run/netns/$NSPID
ln -s /proc/$NSPID/ns/net /var/run/netns/$NSPID


# Check if we need to create a bridge.
if [ "$IFTYPE" = "bridge" ] && [ ! -d /sys/class/net/$IFNAME ]; then
    (ip link set $IFNAME type bridge > /dev/null 2>&1) || (brctl addbr $IFNAME)
    ip link set $IFNAME up
fi

# If it's a bridge, we need to create a veth pair
if [ "$IFTYPE" = "bridge" ]; then
    LOCAL_IFNAME=pl$NSPID$CONTAINER_IFNAME
    GUEST_IFNAME=pg$NSPID$CONTAINER_IFNAME
    ip link add name $LOCAL_IFNAME type veth peer name $GUEST_IFNAME
    case "$BRTYPE" in
        linux)
            (ip link set $LOCAL_IFNAME master $IFNAME > /dev/null 2>&1) || (brctl addif $IFNAME $LOCAL_IFNAME)
            ;;
        openvswitch)
            ovs-vsctl add-port $IFNAME $LOCAL_IFNAME
            ;;
    esac
    ip link set $LOCAL_IFNAME up
fi

# If it's a physical interface, create a macvlan subinterface
if [ "$IFTYPE" = "phys" ]; then
    GUEST_IFNAME=ph$NSPID$CONTAINER_IFNAME
    ip link add link $IFNAME dev $GUEST_IFNAME type macvlan mode bridge
    ip link set $IFNAME up
fi

ip link set $GUEST_IFNAME netns $NSPID
ip netns exec $NSPID ip link set $GUEST_IFNAME name $CONTAINER_IFNAME
[ "$MACADDR" ] && ip netns exec $NSPID ip link set $CONTAINER_IFNAME address $MACADDR
if [ "$IPADDR" = "dhcp" ]; then
    (( VERB )) && echo "Bringing up dev $CONTAINER_IFNAME using DHCP"
    ip netns exec $NSPID udhcpc -qi $CONTAINER_IFNAME
else
    (( VERB )) && echo "Bringing up dev $CONTAINER_IFNAME manually w/ IP address $IPADDR"
    ip netns exec $NSPID ip addr add $IPADDR dev $CONTAINER_IFNAME
    [ "$GATEWAY" ] && {
	ip netns exec $NSPID ip route delete default >/dev/null 2>&1 && true
    }
    ip netns exec $NSPID ip link set $CONTAINER_IFNAME up
fi

# If any routes were specified for the new container interface (eg. --route
# 224.0.0.0/4), establish them.  We must do this before any default route
# via a gateway, in case it is over one of these new routes.
for network in ${ROUTE[*]}; do
    (( VERB )) && echo "Adding route for $network over dev $CONTAINER_IFNAME"
    ip netns exec $NSPID ip route add $network dev $CONTAINER_IFNAME
done

# Finally, set up any default route via a gateway
if [ "$GATEWAY" ]; then
    (( VERB )) && echo "Setting default route via gateway $GATEWAY"
    ip netns exec $NSPID ip route replace default via $GATEWAY
fi

# Give our ARP neighbors a nudge about the new interface
if which arping > /dev/null 2>&1
then
    IPADDR=$(echo $IPADDR | cut -d/ -f1) 
    ip netns exec $NSPID arping -c 1 -A -I $CONTAINER_IFNAME $IPADDR > /dev/null 2>&1
else
    echo "Warning: arping not found; interface may not be immediately reachable"
fi
exit 0
