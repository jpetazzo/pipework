#!/bin/bash

# Exit immediately, if any command fails without being captured by an if ...; then
set -e

CONTAINER_IFNAME=eth1
while (( $# )); do
    case "$1" in
        --verbose|-v)
            VERB=1
            ;;
        --wait|-w)
            WAIT=1
            ;;
        --route|-r)
            # Collect each route in another ${ROUTE[x]} entry
            shift
            ROUTE[${#ROUTE[*]}]=$1
            (( VERB )) && echo "Route network: $1"
            ;;
        --interface|-i)
            shift
            CONTAINER_IFNAME=$1
            (( VERB )) && echo "Guest i'face:  $CONTAINER_IFNAME"
            ;;
        --*|-*) # unrecognized, eg. --help, -?
            HELP=1
            echo "Invalid option: $1"
            ;;
        *)
            if   [ -z "$IFNAME" ]; then
                IFNAME=$1
                (( VERB )) && echo "Host  i'face:  $IFNAME"
            elif [ -z "$GUESTNAME" ]; then
                GUESTNAME=$1
                (( VERB )) && echo "Guest name:    $GUESTNAME"
            elif [ -z "$IPADDR" ]; then
                IPADDR=$1
                (( VERB )) && echo "IP  address:   $IPADDR"
            elif [ -z "$MACADDR" ]; then
                MACADDR=$1
                (( VERB )) && echo "MAC address:   $MACADDR"
            else
                HELP=1
                echo "Invalid argument: $1"
            fi
            ;;
    esac
    shift
done

# Validate args, ensuring that at least an IPADDR was provided
[ "$WAIT" ] && {
  while ! grep -q ^1$ /sys/class/net/$CONTAINER_IFNAME/carrier 2>/dev/null
  do sleep 1
  done
  exit 0
}

[ "$IPADDR" ] || HELP=1
[ "$HELP" ] && {
    echo "Syntax:"
    echo "pipework <hostinterface> <guest> <ipaddr>/<subnet>[@default_gateway] [macaddr]"
    echo "pipework <hostinterface> <guest> dhcp [macaddr]"
    echo "pipework -w|--wait         (await interface appearance, within container)"
    echo "  The following options are available in any of the above commands:"
    echo "    -i|--interface <containerinterface> ..."
    echo "    -v|--verbose ...       (log activity)"
    echo "    -h|--help              (print this help and exit)"
    echo "  Any number of additional routes using the new interface may be specified:"
    echo "    -r|--route <network>   (route <network> via dev ${CONTAINER_IFNAME})"
    echo "  eg.  --route 224.0.0.0/4 (route multicast via ${CONTAINER_IFNAME})"
    exit 1
}

if [ "$IPADDR" = "dhcp" ]; then
    # We use udhcpc to obtain the DHCP lease, make sure it's installed.
    which udhcpc >/dev/null || {
        echo "You asked for DHCP; please install udhcpc first."
        exit 1
    }
else
    # Check if a subnet mask was provided.
    echo $IPADDR | grep -q / || {
        echo "The IP address should include a netmask."
        echo "Maybe you meant $IPADDR/24 ?"
        exit 1
    }
    # Check if a gateway address was provided.
    if echo $IPADDR | grep -q @
    then
        GATEWAY=$(echo $IPADDR | cut -d@ -f2)
        IPADDR=$(echo $IPADDR | cut -d@ -f1)
    else
        GATEWAY=
    fi
fi

# First step: determine type of first argument (bridge, physical interface...)
if [ -d /sys/class/net/$IFNAME ]
then
    if [ -d /sys/class/net/$IFNAME/bridge ]
    then 
        IFTYPE=bridge
        BRTYPE=linux
    elif $(which ovs-vsctl >/dev/null) && $(ovs-vsctl list-br|grep -q ^$IFNAME$)
    then 
        IFTYPE=bridge
        BRTYPE=openvswitch
    else
        IFTYPE=phys
    fi
else
    case "$IFNAME" in
        br*)
            IFTYPE=bridge
            BRTYPE=linux
            ;;
        *)
            echo "I do not know how to setup interface $IFNAME."
            exit 1
            ;;
    esac
fi

# Second step: find the guest (for now, we only support LXC containers).  Try to find a cgroup
# matching exactly the provided name.  Use cgroup mount or docker to find a process within the
# container, remember it in NSPID, and prepare to adjust its container's networking.
while read dev mnt fstype options dump fsck
do
    [ "$fstype" != "cgroup" ] && continue
    echo $options | grep -qw devices || continue
    CGROUPMNT=$mnt
    (( VERB )) && echo "Found cgroup devices mount point: ${CGROUPMNT}"
done < /proc/mounts

if [ "$CGROUPMNT" ]; then
    # OK, try to find NSPID using the cgroup devices mount point.  
    CGROUPPATH=$( find "$CGROUPMNT" -name "$GUESTNAME" )
    if (( $( echo -n "${CGROUPPATH}" | wc -l ) == 1 )); then
        NSPID=$( head -n 1 ${CGROUPPATH}/tasks || true )
        [ -z "$NSPID" ] && (( VERB )) && echo "Could not find a process using ${CGROUPPATH}"
    fi
fi
if [ -z "$NSPID" ]; then
    # If we didn't find anything using cgroups, try to lookup the container with Docker.  Normally,
    # this'll be docker, but under some systems it's named docker.io
    DOCKER=$( which docker 2>/dev/null || which docker.io 2>/dev/null )
    if [ "$DOCKER" ]; then
        NSPID=$( $DOCKER inspect --format='{{ .State.Pid }}' $GUESTNAME || true )
        if [ -z "$NSPID" ] || [ "$NSPID" = "0" ] || [ "$NSPID" = "<no value>" ]; then
            (( VERB )) && echo "Container $GUESTNAME not found, not running, or unknown to Docker."
            NSPID=""
        fi
    else
        (( VERB )) && echo "Container $GUESTNAME not found, and Docker not installed."
    fi
fi
if [ -z "$NSPID" ]; then
    echo "Could not find a process inside container ${GUESTNAME}."
    exit 1
fi
(( VERB )) && echo "Found container ${GUESTNAME} process $NSPID"

if ! mkdir -p /var/run/netns \
    || ! rm -f /var/run/netns/$NSPID \
    || ! ln -s /proc/$NSPID/ns/net /var/run/netns/$NSPID; then
    echo "Could not prepare to adjust container networking; run using sudo?"
    exit 1
fi

# Check if we need to create a bridge.
if [ "$IFTYPE" = "bridge" ] && [ ! -d /sys/class/net/$IFNAME ]; then
    ip link set $IFNAME type bridge >/dev/null 2>&1 || brctl addbr $IFNAME
    ip link set $IFNAME up
fi

# If it's a bridge, we need to create a veth pair
if [ "$IFTYPE" = "bridge" ]; then
    LOCAL_IFNAME=pl$NSPID$CONTAINER_IFNAME
    GUEST_IFNAME=pg$NSPID$CONTAINER_IFNAME
    ip link add name $LOCAL_IFNAME type veth peer name $GUEST_IFNAME
    case "$BRTYPE" in
        linux)
            ip link set $LOCAL_IFNAME master $IFNAME >/dev/null 2>&1 || brctl addif $IFNAME $LOCAL_IFNAME
            ;;
        openvswitch)
            ovs-vsctl add-port $IFNAME $LOCAL_IFNAME
            ;;
    esac
    ip link set $LOCAL_IFNAME up
fi

# If it's a physical interface, create a macvlan subinterface
if [ "$IFTYPE" = "phys" ]; then
    GUEST_IFNAME=ph$NSPID$CONTAINER_IFNAME
    ip link add link $IFNAME dev $GUEST_IFNAME type macvlan mode bridge
    ip link set $IFNAME up
fi

ip link set $GUEST_IFNAME netns $NSPID
ip netns exec $NSPID ip link set $GUEST_IFNAME name $CONTAINER_IFNAME
[ "$MACADDR" ] && ip netns exec $NSPID ip link set $CONTAINER_IFNAME address $MACADDR
if [ "$IPADDR" = "dhcp" ]; then
    (( VERB )) && echo "Bringing up dev $CONTAINER_IFNAME using DHCP"
    ip netns exec $NSPID udhcpc -qi $CONTAINER_IFNAME
else
    (( VERB )) && echo "Bringing up dev $CONTAINER_IFNAME manually w/ IP address $IPADDR"
    ip netns exec $NSPID ip addr add $IPADDR dev $CONTAINER_IFNAME
    if [ "$GATEWAY" ]; then
        ip netns exec $NSPID ip route delete default >/dev/null 2>&1 || true
    fi
    ip netns exec $NSPID ip link set $CONTAINER_IFNAME up
fi

# If any routes were specified for the new container interface (eg. --route
# 224.0.0.0/4), establish them.  We must do this before any default route
# via a gateway, in case it is over one of these new routes.
for network in ${ROUTE[*]}; do
    (( VERB )) && echo "Adding route for $network over dev $CONTAINER_IFNAME"
    ip netns exec $NSPID ip route add $network dev $CONTAINER_IFNAME
done

# Finally, set up any default route via a gateway
if [ "$GATEWAY" ]; then
    (( VERB )) && echo "Setting default route via gateway $GATEWAY"
    ip netns exec $NSPID ip route replace default via $GATEWAY
fi

# Give our ARP neighbors a nudge about the new interface
if which arping >/dev/null 2>&1; then
    IPADDR=$(echo $IPADDR | cut -d/ -f1) 
    ip netns exec $NSPID arping -c 1 -A -I $CONTAINER_IFNAME $IPADDR >/dev/null 2>&1
else
    echo "Warning: arping not found; interface may not be immediately reachable"
fi
exit 0
